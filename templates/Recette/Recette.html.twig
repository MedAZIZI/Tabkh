{% extends 'base.html.twig' %}

{% block title %}
	{{recette.title}}
{% endblock %}

{% block body %}
	<style>
		body {

			background-image: url("{{ asset('bg-icone.png') }}");
			background-size: cover;
			background-repeat: repeat;
			background-attachment: fixed;
			/*height: 150vh;*/
		}
		[data-drop-target] {
			height: 600px;
			width: 400px;
			margin: 25px;
			padding: 20px;
			background-color: #D2ECD8;
			float: left;
			border-radius: 15px;
		}
		.drag-enter {
			border: 2px dashed #000;
		}
		.box {
			width: 100px;
			height: 100px;
			float: left;
		}
		.box:nth-child(3) {
			clear: both;
		}
	</style>
	{# <div class="bg-black  w-full h-full opacity-10 blur-xl absolute z-10"></div>  container mx-auto  p-8 bg-white rounded-lg shadow-md text-center h-screen#}
	<div class="container flex flex-row shadow-md h-4/5 bg-white mx-auto rounded-lg  my-8">


		<div class="w-full p-8 flex flex-col gap-6">
			<img class="rounded-lg bg-black opacity-90" src="{{ asset('food.jpg') }}"/>
			<h1 class="text-4xl font-bold mt-3 mb-7 tc1">{{recette.title}}</h1>

			<p class="text-lg mb-4 tc2">
				{{recette.description}}
			</p>
		</div>
		<div class="divider lg:divider-horizontal"></div>
		<div class="w-full p-8 flex flex-col gap-6">
			<h1 class="text-4xl font-bold  tc1">Ingredients :</h1>
			<ul
				class="p-6">
				{# {{dump(recette_ing)}} #}

				{% for item in recette_ing %}
					<li class="tc2 text-lg list-disc">{{ item }}</li>
				{% endfor %}
			</ul>
			<div class="divider "></div>
			<h1 class="text-4xl font-bold  tc1">Etapes :</h1>
			<ul
				class="p-6">
				{# {{dump(recette_step)}} #}
				{% for s in recette_step %}
					<li class="tc2 text-lg list-decimal">
						{{s}}
					</li>
				{% endfor %}

			</ul>
		</div>
		{# 
					https://codepen.io/byronglover/pen/oxjgEK   
					// inspired code
				#}


	</div>
	<div class="container flex flex-row shadow-md h-4/5 bg-white mx-auto rounded-lg  my-8">
		<div class="collapse bg-emerald-100 ">
			<input type="radio" name="my-accordion-1"/>
			<div class="collapse-title text-xl font-medium text-[#5C9896] text-center">
				Cliquer pour commencer la preparation ...
			</div>

			<div class="collapse-content text-[#5C9896]" id="dd">
				
				<div class="w-full p-8 flex flex-row gap-6 justify-center">
					<div data-drop-target="true" class="">

						{% for item in recette_ing %}

							<div id="box_{{ loop.index }}" draggable="true" class="box tc2 bg-emerald-100 text-lg list-disc text-center m-1 rounded-lg">{{ item }}</div>

						{% endfor %}
					</div>
					<div class="tc2  flex flex-col inline-block align-middle" style="height: 600px;width: 200px; padding-top:250px">
						= > drag the ingrediant 
						 and drop it there = >
					</div>

					<div data-drop-target="true"></div>
				</div>
				<div class="flex flex-row justify-center">
					<ul class="steps" id="adv">
					{% for item in recette_ing %}
						<li data-content=" " class="step"></li>
					{% endfor %}
					</ul>
				</div>
			</div>



			<script>
			var step = 0;
				 function addSteps() {
					var steps = document.querySelectorAll('#adv .step');
					steps[step].classList.add('step-primary');
					step++;
				}


				// Function handleDragStart(), Its purpose is to store the id of the draggable element.
function handleDragStart(e) {
e.dataTransfer.setData("text", this.id); // note: using "this" is the same as using: e.target.
}
// end function


// The dragenter event fires when dragging an object over the target.
// The css class "drag-enter" is append to the targets object.
function handleDragEnterLeave(e) {
if (e.type == "dragenter") {
this.className = "drag-enter"
} else {
this.className = "" // Note: "this" referces to the target element where the "dragenter" event is firing from.
}
}
// end function


// Function handles dragover event eg.. moving your source div over the target div element.
// If drop event occurs, the function retrieves the draggable elementâ€™s id from the DataTransfer object.
function handleOverDrop(e) {
e.preventDefault();
// Depending on the browser in use, not using the preventDefault() could cause any number of strange default behaviours to occur.
if (e.type != "drop") {
return; // Means function will exit if no "drop" event is fired.
}
// Stores dragged elements ID in var draggedId
var draggedId = e.dataTransfer.getData("text");
// Stores referrence to element being dragged in var draggedEl
var draggedEl = document.getElementById(draggedId);

// if the event "drop" is fired on the dragged elements original drop target e.i..  it's current parentNode,
// then set it's css class to ="" which will remove dotted lines around the drop target and exit the function.
if (draggedEl.parentNode == this) {
this.className = "";
return; // note: when a return is reached a function exits.
}
// Otherwise if the event "drop" is fired from a different target element, detach the dragged element node from it's
// current drop target (i.e current perantNode) and append it to the new target element. Also remove dotted css class.
draggedEl.parentNode.removeChild(draggedEl);
this.appendChild(draggedEl); // Note: "this" references to the current target div that is firing the "drop" event.
addSteps()
this.className = "";
}
// end Function


// Retrieve two groups of elements, those that are draggable and those that are drop targets:
var draggable = document.querySelectorAll('[draggable]')
var targets = document.querySelectorAll('[data-drop-target]');
// Note: using the document.querySelectorAll() will aquire every element that is using the attribute defind in the (..)


// Register event listeners for the"dragstart" event on the draggable elements:
for (var i = 0; i < draggable.length; i++) {
draggable[i].addEventListener("dragstart", handleDragStart);
}

// Register event listeners for "dragover", "drop", "dragenter" & "dragleave" events on the drop target elements.
for (var i = 0; i < targets.length; i++) {
targets[i].addEventListener("dragover", handleOverDrop);
targets[i].addEventListener("drop", handleOverDrop);
targets[i].addEventListener("dragenter", handleDragEnterLeave);
targets[i].addEventListener("dragleave", handleDragEnterLeave);
}
			</script>
		{% endblock %}
